/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export class Surreal {
  constructor()
  connect(endpoint: string, opts?: Record<string, unknown>): Promise<void>
  use(value: { namespace?: string; database?: string }): Promise<void>
  set(key: string, value: unknown): Promise<void>
  unset(key: string): Promise<void>
  signup(credentials: { namespace: string; database: string; scope: string; [k: string]: unknown }): Promise<string>
  signin(credentials: { username: string; password: string } | { namespace: string; username: string; password: string } | { namespace: string; database: string; username: string; password: string } | { namespace: string; database: string; scope: string; [k: string]: unknown }): Promise<string>
  invalidate(): Promise<void>
  authenticate(token: string): Promise<boolean>
  query(sql: string, bindings?: Record<string, unknown>): Promise<unknown[]>
  select(resource: string): Promise<{ id: string; [k: string]: unknown }[]>
  create(resource: string, data?: Record<string, unknown>): Promise<{ id: string; [k: string]: unknown }[]>
  update(resource: string, data?: Record<string, unknown>): Promise<{ id: string; [k: string]: unknown }[]>
  merge(resource: string, data: Record<string, unknown>): Promise<{ id: string; [k: string]: unknown }[]>
  patch(resource: string, data: unknown[]): Promise<unknown[]>
  delete(resource: string): Promise<{ id: string; [k: string]: unknown }[]>
  version(): Promise<string>
  health(): Promise<void>
}
